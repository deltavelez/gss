In all antialiasing functions using main and adjacent pixels, to optimize
by having the main pixel be directly copied, and the adyacent ones being blent.

--------
To  review the functions to proyect in logarithmic scale and better deal with error conditions such as zero or negative arguments

---------


To explore changes to

lb_gr_plot2d_line_reverse(PICTURE_T *Pic, VIEWPORT_2D_T vp2d, VECTOR_R_T *Lx, VECTOR_R_T *Ly,

to use a line2d_r instead of real vectors, to deal with discontinuities

---------
Create function that can render a picture onto another picture and not just to the framebuffer.

--

Comparar las funciones lb_gr_draw_circle_antialiasing() y lb_gr_draw_circle_antialiasing_f()
--

To explore is jpeglib.h could be loaded including its source code instead.

--

To functions
lb_cp_print_c(), add a tolerance parameter, instead of using a default one
-----
To all print functions, to add sprint version in order to print to a buffer

lb_re_equal()
lb_re_larger_or_equal()
lb_re_smaller_or_equal()



-------------------------------
To add a tolerance parameter to
lb_cp_equal()
-------------------------------
To integrate both matrix multiplication 
-------------------------------
implement functions to load and save CSV into vectors or matrices
lb_al_load_CSV_FILE
lb_al_save_CSV_FILE
-------------------------------


#define DEMO_CIRCLE_FILLED_FAST
==> has a minor glitch at angles = 45 +k*90


To follow-up on the order of the bytes in SDL.
As it is works, but it may affect support of other platforms

Uint32 getpixel(SDL_Surface *surface, int x, int y)
{
  int bpp = surface->format->BytesPerPixel;
  /* Here p is the address to the pixel we want to retrieve */
  Uint8 *p = (Uint8 *)surface->pixels + y * surface->pitch + x * bpp;

  switch(bpp) {
  case 1:
    return *p;
    break;

  case 2:
    return *(Uint16 *)p;
    break;

  case 3:
    if(SDL_BYTEORDER == SDL_BIG_ENDIAN)
      return p[0] << 16 | p[1] << 8 | p[2];
    else
      return p[0] | p[1] << 8 | p[2] << 16;
    break;

  case 4:
    return *(Uint32 *)p;
    break;

  default:
    return 0;       /* shouldn't happen, but avoids warnings */
  }
}
