in function erfc(), to add a parameter to pass the relative error instead of having it defined as a fixed constant
-----------------
To review lb_gr_plot2d_line() and improve the plotting of lines,
adding a method to handle potential discontinuities in a line, for example,
be it:

y=f(x)=1/(x-3)

L[0]=0 , 1/(0-3) --> good, can be plotted
L[1]=1 , 1/(1-3) --> good, can be plotted
L[2]=1 , 1/(2-3) --> good, can be plotted
L[3]=1 , 1/(3-3) --> invalid, can not be plotted
L[4]=1 , 1/(4-3) --> good, can be plotted
L[5] = good, etc.

A better plotting routine would trace segments from L0 up to L2, then stop.
Then, would resume from L4 to L5, to L6, etc.

Thus, in lines, having xr, yr is not enough.  A point needs a flag to indicate
whether the data is valid or not.

-----------
to review the thickness of lb_gr_draw_line_antialiasing()
----------
In all antialiasing functions using main and adjacent pixels, to optimize
by having the main pixel be directly copied, and the adyacent ones being blent.

--------
To  review the functions to proyect in logarithmic scale and better deal with error conditions such as zero or negative arguments

---------


To explore changes to

lb_gr_plot2d_line_reverse(PICTURE_T *Pic, VIEWPORT_2D_T vp2d, VECTOR_R_T *Lx, VECTOR_R_T *Ly,

to use a line2d_r instead of real vectors, to deal with discontinuities

---------
Create function that can render a picture onto another picture and not just to the framebuffer.

--

Comparar las funciones lb_gr_draw_circle_antialiasing() y lb_gr_draw_circle_antialiasing_f()
--

To explore is jpeglib.h could be loaded including its source code instead.

--

To functions
lb_cp_print_c(), add a tolerance parameter, instead of using a default one
-----
To all print functions, to add sprint version in order to print to a buffer

lb_re_equal()
lb_re_larger_or_equal()
lb_re_smaller_or_equal()



-------------------------------
To add a tolerance parameter to
lb_cp_equal()
-------------------------------
To integrate both matrix multiplication 
-------------------------------
implement functions to load and save CSV into vectors or matrices
lb_al_load_CSV_FILE
lb_al_save_CSV_FILE
-------------------------------


#define DEMO_CIRCLE_FILLED_FAST
==> has a minor glitch at angles = 45 +k*90


To follow-up on the order of the bytes in SDL.
As it is works, but it may affect support of other platforms

Uint32 getpixel(SDL_Surface *surface, int x, int y)
{
  int bpp = surface->format->BytesPerPixel;
  /* Here p is the address to the pixel we want to retrieve */
  Uint8 *p = (Uint8 *)surface->pixels + y * surface->pitch + x * bpp;

  switch(bpp) {
  case 1:
    return *p;
    break;

  case 2:
    return *(Uint16 *)p;
    break;

  case 3:
    if(SDL_BYTEORDER == SDL_BIG_ENDIAN)
      return p[0] << 16 | p[1] << 8 | p[2];
    else
      return p[0] | p[1] << 8 | p[2] << 16;
    break;

  case 4:
    return *(Uint32 *)p;
    break;

  default:
    return 0;       /* shouldn't happen, but avoids warnings */
  }
}
